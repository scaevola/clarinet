initSidebarItems({"fn":[["bad_resource",""],["bad_resource_id",""],["custom_error","Creates a new error with a caller-specified error class name and message."],["generic_error",""],["get_custom_error_class","If this error was crated with `custom_error()`, return the specified error class name. In all other cases this function returns `None`."],["invalid_hostname",""],["not_supported",""],["null_opbuf",""],["range_error",""],["resource_unavailable",""],["type_error",""],["uri_error",""]],"macro":[["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["bail","Return early with an error."]],"struct":[["JsError","A `JsError` represents an exception coming from V8, with stack frames and line numbers. The deno_cli crate defines another `JsError` type, which wraps the one defined here, that adds source map support and colorful formatting."],["JsStackFrame",""]],"trait":[["Context","Provides the `context` method for `Result`."]],"type":[["AnyError","A generic wrapper that can encapsulate any concrete error type."]]});